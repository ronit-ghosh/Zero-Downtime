generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  websites      Website[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Website {
  id           String        @id @default(uuid())
  name         String
  url          String
  isTracking   Boolean       @default(true)
  userId       String
  user         User          @relation(references: [id], fields: [userId])
  websiteTicks WebsiteTick[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model WebsiteTick {
  id             String        @id @default(uuid())
  responseTimeMs Int
  status         WebsiteStatus
  statusCode     Int
  errorCode      String?
  Website        Website?      @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  websiteId      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum WebsiteStatus {
  UP
  DOWN
  UNKNOWN
}
